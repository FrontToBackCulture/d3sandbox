//Function for converting CSV values from strings to Dates and numbers
var rowConverter = function(d) {
    return {
        Date: parseTime(d.Date),
        Amount: parseInt(d.Amount)
     };
}


d3.dsv(",", "data.csv", function(d, i , columns) {
                for (var i = 1, n = columns.length; i < n; ++i) d[columns[i]] = +d[columns[i]];
                return d;
            }).then(function(error,data)


            d3.csv("data.csv", function(d, i, columns) {
                    for (var i = 1, n = columns.length; i < n; ++i) d[columns[i]] = +d[columns[i]];
                    return d;
                },

d3.max(dataset, function(d) {
            return d3.max(keys, function(key) {
                return d[key];
            });


//d3.select('svg,  svg g').attr('width', width).attr('height', height);

        stackedData = d3.stack().keys(fKeys)(dataset);

        autoScaleY = true; // scale Y according to selected data or always use original range
        stackedDataForMax;

        if (autoScaleY && stackedData.length > 0) {
            // only selected data
            stackedDataForMax = stackedData;
        }
        else {
            // full range
            stackedDataForMax = d3.stack().keys(keys)(dataset);
        }

        maxDataY = 1.2 * d3.max(stackedDataForMax.map(function (d) {
            return d3.max(d, function (innerD) {
                return innerD[1];
            });
        }));


        xScale.domain(dataset.map(function (d) {
            return d.State
        }));

        yScale.domain([0, maxDataY])
            .rangeRound([height, 0]);

/*

        xTicks = d3.selectAll(".x.d3-axis .tick text");

        xTicks.each(function () {
            text = d3.select(this);
            textWidth = text.node().getComputedTextLength();
            tickArr.push(textWidth);

        });
        textWidthMax = d3.max(tickArr);


        if (textWidthMax > xScale.bandwidth()) {
            xTicks
                .style("text-anchor", "middle")
                //.attr("x", textWidthMax/2)
                .attr("x", 0)
                .attr("y", 0)
                //.attr("dy", "1.5em")
                .attr("transform", "translate(0,15)rotate(-30)");
        } else {
            xTicks
            //.style("text-anchor", "middle")
                .attr("x", "0")
                .attr("y", 5)
                .attr("dy", "0.75em")
                .attr("transform", "rotate(0)");
        }

        yAxisLabel.attr('x', -height / 2);
        yAxis.tickSizeInner(-width);
        yAxisGroup.call(yAxis.scale(yScale))
            .selectAll("text")
            .attr("dx", "-0.5em");
*/

        //Melvin: draw the x axis
        g.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        //Melvin: draw the y axis
        g.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("x", 2)
            .attr("y", yScale(yScale.ticks().pop()) + 0.5)
            .attr("dy", "0.32em")
            .attr("fill", "#000")
            .attr("font-weight", "bold")
            .attr("text-anchor", "start")
            .text("Population"); //axes label

        // update selection

        stackedBars = gg
            .selectAll(".d3-group")
            .data(stackedData, function (__data__, i, group) {
                return __data__.key;
            });

        // exit the whole group
        stackedBars
            .exit().remove();

        // enter selection
        stackedBarsEnter = stackedBars
            .enter()
            .append("g")
            .attr("fill", function (d) {
                return z(d.key);
            })
            .attr("class", function (d, i) {
                return "d3-group d3-group-" + i;
            });

        // add path on enter
        bars = stackedBarsEnter
            .selectAll('rect')
            .data(function (d) {
                return d;
            })
            .enter().append("rect")
            .attr('class', 'd3-rect')
            .attr("x", function (d) {
                return xScale(d.data.State)+40;
            })
            .attr("y", function (d) {
                return yScale(d[1]);
            })
            .attr("height", function (d) {
                return yScale(d[0]) - yScale(d[1]);
            })
            .attr("width", xScale.bandwidth());


        // update selection

        stackedBars = gg
            .selectAll(".d3-group")
            .data(stackedData, function (__data__, i, group) {
                return __data__.key;
            });

        // exit the whole group
        stackedBars
            .exit().remove();

        // enter selection
        stackedBarsEnter = stackedBars
            .enter()
            .append("g")
            .attr("fill", function (d) {
                return z(d.key);
            })
            .attr("class", function (d, i) {
                return "d3-group d3-group-" + i;
            });

        // add path on enter
        bars = stackedBarsEnter
            .selectAll('rect')
            .data(function (d) {
                return d;
            })
            .enter().append("rect")
            .attr('class', 'd3-rect');

// update + enter
        stackedBars = stackedBars.merge(stackedBarsEnter);

        stackedBars.selectAll('.d3-rect')
            .data(function (d) {
                return d;
            })
            .attr("x", function (d) {
                return xScale(d.data.State);
            })
            .attr("y", function (d) {
                return yScale(d[1]);
            })
            .attr("height", function (d) {
                return yScale(d[0]) - yScale(d[1]);
            })
            .attr("width", xScale.bandwidth());